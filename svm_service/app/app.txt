# svm_service/app.py
from flask import Flask, request, jsonify
import time
import os
import librosa
import numpy as np
from tensorflow.keras.models import load_model



app = Flask(__name__)

# Load the pre-trained model
model = load_model('/Nouvarch/shared_volume/svm-classification-model.h5')
genre_dict={0: 'blues', 1: 'classical', 2: 'country', 3: 'disco', 4: 'hiphop', 5: 'jazz', 6: 'metal', 7: 'pop', 8: 'reggae', 9: 'rock'}

# Function to retrieve the latest audio file from a directory
def get_latest_audio_file(directory):
    files = [os.path.join(directory, f) for f in os.listdir(
        directory) if f.endswith('.wav')]  # Change extension if different
    if files:
        # Get the latest file based on creation time
        return max(files, key=os.path.getctime)
    else:
        return None

def extract_features(file_path):
    # Load audio file with librosa
    audio, sample_rate = librosa.load(file_path, res_type='kaiser_fast')
    # Extract MFCCs and other features...
    mfccs = librosa.feature.mfcc(y=audio, sr=sample_rate, n_mfcc=20)
    mfccs_processed = np.mean(mfccs.T,axis=0)

    return mfccs_processed

def predict_genre(file_path):
    # Extract features
    features = extract_features(file_path)

    # Reshape features to fit the model input format
    features = np.reshape(features, (1, -1)) # Reshape for model

    # Predict genre
    prediction = model.predict(features)
    print("Raw Prediction:", prediction)
    # Convert prediction to genre
    predicted_genre = np.argmax(prediction)
    predicted_genre_name = genre_dict.get(predicted_genre, "Unknown Genre")
    return predicted_genre_name

@app.route('/classify', methods=['GET', 'POST'])
def classify():

    # Directory where the shared volume is mounted
    shared_volume_directory = '/Nouvarch/shared_volume/'

    while True:
        latest_audio_file = get_latest_audio_file(shared_volume_directory)
        if latest_audio_file:
            # Process the latest audio file (e.g., perform actions, analysis, etc.)
            file_name = os.path.basename(latest_audio_file)
            break
        time.sleep(60) 
    file_path = shared_volume_directory + file_name
    genre = predict_genre(file_path)
    result = "Predicted Genre:" + genre
    return result


if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
